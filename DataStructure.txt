//file  function
#include<stdio.h>
void main()
{
   FILE *fp;
   char ch;
   clrscr();

   //writing data into file
   fp=fopen("test.txt","w");
   while((ch=getchar())!=EOF)
   {
      //printf("write");
      putc(ch,fp);
      //printf("%c",ch);
   }
   fclose(fp);

   //reading data into file
   fp=fopen("C://TURBOC3//BIN//TEST.TXT","r");
   /*while((ch=getc(fp))!=EOF)
     {
       fscanf(fp,"%s",&ch);
       printf("%s",&ch);
     }*/
    /*while(fscanf(fp,"%s",&ch)!=EOF)
     {

       printf("%s",&ch);
     }*/
   while((ch=getc(fp))!=EOF)
     {
       putc(ch,fp);
       printf("%c",ch);
     }
   fclose(fp);
   getch();
}

//other ways
#include<stdio.h>
#include<stdlib.h>
void main()
{
  FILE *fp;
  char ch;
  clrscr();

  //write
  fp=fopen("test.txt","w");
  fprintf(fp,"hello");
  if(fp==NULL)
  {
    printf("file not found");
  }
  //exit(1);
  fclose(fp);

  //read
  fp=fopen("test.txt","r");
  fscanf(fp,"%s",&ch);
  printf("%s",&ch);
  fclose(fp);
  getch();
}
//to enter n values
#include<stdio.h>
void main()
{
   FILE *fp;
   char name[20];
   char comb[10];
   int regNo,i,n;
   clrscr();

   //writing data into file
   printf("Enter the values\n");
   scanf("%d",&n);
   fp=fopen("test.txt","w");

   for(i=0;i<=n;i++)
   {
      printf("Enter the student details\n");
      scanf("%s %d %s",name,&regNo,comb);
      fprintf(fp,"%s %d %s",name,regNo,comb);
   }
   fclose(fp);

   //reading data into file
   fp=fopen("C:\\TURBOC3\\BIN\\TEST.TXT","r");
   printf("reading the file\n");
   /*for(i=0;i<=n;i++)
   {
     fscanf(fp,"%s %d %s",name,&regNo,comb);
     printf("name=%s Reg=%d comb=%s\n",name,regNo,comb);
   }*/
   while(fscanf(fp,"%s %d %s",name,&regNo,comb)!=EOF)
   {
      printf("name=%s Reg=%d comb=%s\n",name,regNo,comb);
   }
   fclose(fp);
   getch();

}

//copy the data from one file to another file
#include<stdio.h>
int main()
{
      int ch;
      FILE *fp,*fq;
      fp=fopen("source.txt","r");	
      fq=fopen("backup.txt","w");   
      if(fp==NULL||fq==NULL)
            printf("File does not exist..");
      else
            while((ch=fgetc(fp))!=EOF)
            {
                  fputc(ch,fq);
            }
      printf("File copied.....");
      return 0;
}

//file function using even and odd
#include<stdio.h>
void main()
{
FILE *fp1,*fp2,*fp3;
int num=0;
clrscr();
printf("Enter the numeric content");
fp1=fopen("data.txt","w");
while(num!=-1)
{
  scanf("%d",&num);
  putw(num,fp1);
}
fclose(fp1);
fp1=fopen("C:\TURBOC3\BIN\NUM.TXT","r");
//fp1=fopen("data.txt","r");
fp2=fopen("even.txt","w");
fp3=fopen("odd.txt","w");
while((num=getw(fp1))!=EOF)
{
  if(num%2==0)
   putw(num,fp2);
  else
   putw(num,fp3);
}
  printf("The even number are:\n");
  fp2=fopen("even.txt","r");
  //fp2=fopen("even.txt","r");
  while((num=getw(fp2))!=EOF)
   printf("%d",num);
  fclose(fp2);
  printf("The odd number are:\n");
  fp3=fopen("C:\TURBOC3\BIN\ODD.TXT","r");
  //fp3=fopen("odd.txt","r");
  while((num=getw(fp3))!=EOF)
   printf("%d",num);
  fclose(fp3);
  getch();
}

//file function using structure and pwrite fuction
#include<stdio.h>
struct employee
{
  int empId;
  char name[30];
  float sal;
}emp;

void main()
{
  FILE *fp;
  char ch;
  clrscr();
  fp=fopen("bin.dat","wb");
  printf("Do you want to enter employee details y/n \n");
  ch=getchar();

  while((ch=='Y')||(ch=='y'))
  {
    printf("Enter employee details\n");
    scanf("%d %s %f",&emp.empId,emp.name,&emp.sal);
    fwrite(&emp,sizeof(emp),1,fp);
    printf("Do you want to enter again");
    ch=getchar();
  }
  fclose(fp);
  getch();
}

//Data Structure
//stack
#include<stdio.h>
#define size 10

void push();
void pop();
void display();

int top=-1;
int stack[size];

void main()
{
 int ch;
 while(1)
 {
   printf("1.push\n");
   printf("2.pop\n");
   printf("3.display\n");
   printf("4.exit\n");
   printf("enter your choice\n");
   scanf("%d",&ch);

   switch(ch)
   {
     case 1:push();
	    break;
     case 2:pop();
	    break;
     case 3:display();
	    break;
     case 4:exit(1);
     default:printf("invalid choice\n");
   }
 }
}

void push()
{
 int i;
 if(top==(size-1))
 printf("\nstack overflow");
 else
 {
   printf("\nentered item should be pushed");
   scanf("%d",&i);
   top=top+1;
   stack[top]=i;
 }
}
void pop()
{
  if(top==-1)
  printf("stack underflow");
  else
  {
    printf("\npopped element is: %d",stack[top]);
    top=top-1;
  }
}
void display()
{
  int i;
  if(top==-1)
  printf("\nstack is empty\n");
  else
  {
    printf("\nstack element");
    for(i=top;i>=0;i--)
    printf("%d",stack[i]);
  }
}

//Queue
#include<stdio.h>
#define size 10

void insert();
void del();
void display();

int Q[size];
int front,rear;

void main()
{
 int ch;
 clrscr();
 while(1)
 {
   printf("1.enqueue(insert)\n");
   printf("2.dequeue(delete)\n");
   printf("3.display\n");
   printf("4.exit\n");
   printf("enter your choice\n");
   scanf("%d",&ch);

   switch(ch)
   {
     case 1:insert();
	    break;
     case 2:del();
	    break;
     case 3:display();
	    break;
     case 4:exit(0);
     default:printf("invalid choice\n");
   }
 }
}

void insert()
{
  int data;
  if(rear==size)
  {
    printf("\n linear queue is full");
    return;
  }
  else
  {
    printf("\n enter data: \n");
    scanf("%d",&data);
    Q[rear]=data;
    rear++;
    printf("\n data inserted in the queue\n");
  }
}
void del()
{
 if(rear==front)
 {
   printf("\n queue is empty..\n");
   return;
 }
 else
 {
   printf("\n deleted element is: %d",Q[front]);
   front++;
 }
}

void display()
{
  int i;
  if(front==rear)
  {
    printf("Queue is empty");
    return;
  }
  else
  {
    printf("\n element in queue are: \n");
    for(i=front;i<rear;i++)
    {
       printf("%d",Q[i]);
    }
  }
}

//circular queue
#include<stdio.h>
#define size 10

void insert();
void del();
void display();

int CQ[size];
int front=0, rear=0, count=0;

void main()
{
 int ch;
 clrscr();
 while(1)
 {
   printf("1.enqueue(insert)\n");
   printf("2.dequeue(delete)\n");
   printf("3.display\n");
   printf("4.exit\n");
   printf("enter your choice\n");
   scanf("%d",&ch);

   switch(ch)
   {
     case 1:insert();
	    break;
     case 2:del();
	    break;
     case 3:display();
	    break;
     case 4:return;
     default:printf("invalid choice\n");
   }
 }
}

void insert()
{
   int data;
   if(count==size)
   {
     printf("\n circular queue is full");
   }
   else
   {
     printf("\n enter data: ");
     scanf("%d",&data);
     CQ[rear]=data;
     rear=(rear+1)%size;
     count++;
     printf("\n data is inserted");
   }
}

void del()
{
  if(count==0)
  {
    printf("\n Circular Queue is empty..");
  }
  else
  {
    printf("\n Deleted element from CQ is %d",CQ[front]);
    front=(front+1)%size;
    count--;
  }
}

void display()
{
  int i,j;
  if(count==0)
  {
    printf("\n Circular Queue is empty..");
  }
  else
  {
    printf("\n Element from CQ is\n");
    j=count;
    for(i=front;j!=0;j--)
    {
      printf("%d",CQ[i]);
      i=(i+1)%size;
    }
  }
}

