//file  function
#include<stdio.h>
void main()
{
   FILE *fp;
   char ch;
   clrscr();

   //writing data into file
   fp=fopen("test.txt","w");
   while((ch=getchar())!=EOF)
   {
      //printf("write");
      putc(ch,fp);
      //printf("%c",ch);
   }
   fclose(fp);

   //reading data into file
   fp=fopen("C://TURBOC3//BIN//TEST.TXT","r");
   /*while((ch=getc(fp))!=EOF)
     {
       fscanf(fp,"%s",&ch);
       printf("%s",&ch);
     }*/
    /*while(fscanf(fp,"%s",&ch)!=EOF)
     {

       printf("%s",&ch);
     }*/
   while((ch=getc(fp))!=EOF)
     {
       putc(ch,fp);
       printf("%c",ch);
     }
   fclose(fp);
   getch();
}

//other ways
#include<stdio.h>
#include<stdlib.h>
void main()
{
  FILE *fp;
  char ch;
  clrscr();

  //write
  fp=fopen("test.txt","w");
  fprintf(fp,"hello");
  if(fp==NULL)
  {
    printf("file not found");
  }
  //exit(1);
  fclose(fp);

  //read
  fp=fopen("test.txt","r");
  fscanf(fp,"%s",&ch);
  printf("%s",&ch);
  fclose(fp);
  getch();
}
//to enter n values
#include<stdio.h>
void main()
{
   FILE *fp;
   char name[20];
   char comb[10];
   int regNo,i,n;
   clrscr();

   //writing data into file
   printf("Enter the values\n");
   scanf("%d",&n);
   fp=fopen("test.txt","w");

   for(i=0;i<=n;i++)
   {
      printf("Enter the student details\n");
      scanf("%s %d %s",name,&regNo,comb);
      fprintf(fp,"%s %d %s",name,regNo,comb);
   }
   fclose(fp);

   //reading data into file
   fp=fopen("C:\\TURBOC3\\BIN\\TEST.TXT","r");
   printf("reading the file\n");
   /*for(i=0;i<=n;i++)
   {
     fscanf(fp,"%s %d %s",name,&regNo,comb);
     printf("name=%s Reg=%d comb=%s\n",name,regNo,comb);
   }*/
   while(fscanf(fp,"%s %d %s",name,&regNo,comb)!=EOF)
   {
      printf("name=%s Reg=%d comb=%s\n",name,regNo,comb);
   }
   fclose(fp);
   getch();

}

//copy the data from one file to another file
#include<stdio.h>
int main()
{
      int ch;
      FILE *fp,*fq;
      fp=fopen("source.txt","r");	
      fq=fopen("backup.txt","w");   
      if(fp==NULL||fq==NULL)
            printf("File does not exist..");
      else
            while((ch=fgetc(fp))!=EOF)
            {
                  fputc(ch,fq);
            }
      printf("File copied.....");
      return 0;
}

//file function using even and odd
#include<stdio.h>
void main()
{
FILE *fp1,*fp2,*fp3;
int num=0;
clrscr();
printf("Enter the numeric content");
fp1=fopen("data.txt","w");
while(num!=-1)
{
  scanf("%d",&num);
  putw(num,fp1);
}
fclose(fp1);
fp1=fopen("C:\TURBOC3\BIN\NUM.TXT","r");
//fp1=fopen("data.txt","r");
fp2=fopen("even.txt","w");
fp3=fopen("odd.txt","w");
while((num=getw(fp1))!=EOF)
{
  if(num%2==0)
   putw(num,fp2);
  else
   putw(num,fp3);
}
  printf("The even number are:\n");
  fp2=fopen("even.txt","r");
  //fp2=fopen("even.txt","r");
  while((num=getw(fp2))!=EOF)
   printf("%d",num);
  fclose(fp2);
  printf("The odd number are:\n");
  fp3=fopen("C:\TURBOC3\BIN\ODD.TXT","r");
  //fp3=fopen("odd.txt","r");
  while((num=getw(fp3))!=EOF)
   printf("%d",num);
  fclose(fp3);
  getch();
}

//file function using structure and pwrite fuction
#include<stdio.h>
struct employee
{
  int empId;
  char name[30];
  float sal;
}emp;

void main()
{
  FILE *fp;
  char ch;
  clrscr();
  fp=fopen("bin.dat","wb");
  printf("Do you want to enter employee details y/n \n");
  ch=getchar();

  while((ch=='Y')||(ch=='y'))
  {
    printf("Enter employee details\n");
    scanf("%d %s %f",&emp.empId,emp.name,&emp.sal);
    fwrite(&emp,sizeof(emp),1,fp);
    printf("Do you want to enter again");
    ch=getchar();
  }
  fclose(fp);
  getch();
}

//Data Structure
//stack
#include<stdio.h>
#define size 10

void push();
void pop();
void display();

int top=-1;
int stack[size];

void main()
{
 int ch;
 while(1)
 {
   printf("1.push\n");
   printf("2.pop\n");
   printf("3.display\n");
   printf("4.exit\n");
   printf("enter your choice\n");
   scanf("%d",&ch);

   switch(ch)
   {
     case 1:push();
	    break;
     case 2:pop();
	    break;
     case 3:display();
	    break;
     case 4:exit(1);
     default:printf("invalid choice\n");
   }
 }
}

void push()
{
 int i;
 if(top==(size-1))
 printf("\nstack overflow");
 else
 {
   printf("\nentered item should be pushed");
   scanf("%d",&i);
   top=top+1;
   stack[top]=i;
 }
}
void pop()
{
  if(top==-1)
  printf("stack underflow");
  else
  {
    printf("\npopped element is: %d",stack[top]);
    top=top-1;
  }
}
void display()
{
  int i;
  if(top==-1)
  printf("\nstack is empty\n");
  else
  {
    printf("\nstack element");
    for(i=top;i>=0;i--)
    printf("%d",stack[i]);
  }
}

//Queue
#include<stdio.h>
#define size 10

void insert();
void del();
void display();

int Q[size];
int front,rear;

void main()
{
 int ch;
 clrscr();
 while(1)
 {
   printf("1.enqueue(insert)\n");
   printf("2.dequeue(delete)\n");
   printf("3.display\n");
   printf("4.exit\n");
   printf("enter your choice\n");
   scanf("%d",&ch);

   switch(ch)
   {
     case 1:insert();
	    break;
     case 2:del();
	    break;
     case 3:display();
	    break;
     case 4:exit(0);
     default:printf("invalid choice\n");
   }
 }
}

void insert()
{
  int data;
  if(rear==size)
  {
    printf("\n linear queue is full");
    return;
  }
  else
  {
    printf("\n enter data: \n");
    scanf("%d",&data);
    Q[rear]=data;
    rear++;
    printf("\n data inserted in the queue\n");
  }
}
void del()
{
 if(rear==front)
 {
   printf("\n queue is empty..\n");
   return;
 }
 else
 {
   printf("\n deleted element is: %d",Q[front]);
   front++;
 }
}

void display()
{
  int i;
  if(front==rear)
  {
    printf("Queue is empty");
    return;
  }
  else
  {
    printf("\n element in queue are: \n");
    for(i=front;i<rear;i++)
    {
       printf("%d",Q[i]);
    }
  }
}

//circular queue
#include<stdio.h>
#define size 10

void insert();
void del();
void display();

int CQ[size];
int front=0, rear=0, count=0;

void main()
{
 int ch;
 clrscr();
 while(1)
 {
   printf("1.enqueue(insert)\n");
   printf("2.dequeue(delete)\n");
   printf("3.display\n");
   printf("4.exit\n");
   printf("enter your choice\n");
   scanf("%d",&ch);

   switch(ch)
   {
     case 1:insert();
	    break;
     case 2:del();
	    break;
     case 3:display();
	    break;
     case 4:return;
     default:printf("invalid choice\n");
   }
 }
}

void insert()
{
   int data;
   if(count==size)
   {
     printf("\n circular queue is full");
   }
   else
   {
     printf("\n enter data: ");
     scanf("%d",&data);
     CQ[rear]=data;
     rear=(rear+1)%size;
     count++;
     printf("\n data is inserted");
   }
}

void del()
{
  if(count==0)
  {
    printf("\n Circular Queue is empty..");
  }
  else
  {
    printf("\n Deleted element from CQ is %d",CQ[front]);
    front=(front+1)%size;
    count--;
  }
}

void display()
{
  int i,j;
  if(count==0)
  {
    printf("\n Circular Queue is empty..");
  }
  else
  {
    printf("\n Element from CQ is\n");
    j=count;
    for(i=front;j!=0;j--)
    {
      printf("%d",CQ[i]);
      i=(i+1)%size;
    }
  }
}

----------------------------------
//Linked List insertion program 
#include<stdio.h>
#include<stdlib.h>

struct node
{
  int info;
  struct node *link;
};
typedef struct node Node;
Node *start=NULL;

void create()
{
  char ch;
  int i=0;

  Node *currptr,*newnode;
  currptr=(Node *)malloc(sizeof(Node));
  start=currptr;
  while(1)
  {
    printf("\n Enter the node %d",i+1);
    scanf("%d",&currptr->info);
    printf("/n/n Do you wish to add one more node[y/n]: \n");
    ch=getche();
    if((ch=='Y')||(ch=='y'))
    {
       newnode=(Node *)malloc(sizeof(Node));
       currptr->link=newnode;
       currptr=newnode;
    }
    else
    {
      currptr->link=NULL;
      break;
    }
    i++;
  }
}

void insert_beg(int item)
{
  Node *newnode;

  newnode=(Node *)malloc(sizeof(Node));
  newnode->info=item;
  newnode->link=start;
  start=newnode;
}

void insert_end(int item)
{

  Node *currptr, *newnode;
  if(start==NULL)
  {
    newnode=(Node *)malloc(sizeof(Node));
    newnode->info=item;
    newnode->link=NULL;
    start=newnode;
  }
  else
  {
    currptr=start;
    while(currptr->link!=NULL)
    {
      currptr=currptr->link;
    }
    newnode=(Node *)malloc(sizeof(Node));
    newnode->info=item;
    currptr->link=newnode;
    newnode->link=NULL;

  }
}

void insert_pos(int item,int pos)
{

  int i;
  Node *currptr=start,*newnode;
  if(pos==1)
    insert_beg(item);
  else
  {
    for(i=0;i<pos-2;i++)
    {
      currptr=currptr->link;
    }
    newnode=(Node *)malloc(sizeof(Node));
    newnode->info=item;
    newnode->link=currptr->link;
    currptr->link=newnode;
  }
}

void display()
{
  Node *currptr=start;
  if(start==NULL)
  {
    printf("The list is empty");
  }
  else
  {
    while(currptr!=NULL)
    {
      printf("%d",currptr->info);
      printf("->");
      currptr=currptr->link;
    }
    printf("NULL");
  }
}

int length()
{
  int len=0;
  Node *currptr;

  if(start==NULL)
  {
    printf("\n\n The list is empty");
    return(len);
  }
  currptr=start;
  while(currptr!=NULL)
  {
     len++;
     currptr=currptr->link;
  }
  return(len);
}

void main()
{
  int ch,i,item,pos;
  clrscr();
  while(1)
  {
    printf("\n 1.create");
    printf("\n 2.Display");
    printf("\n 3.Insert in Begining");
    printf("\n 4.insert at end");
    printf("\n 5.insert at specified position");
    printf("\n 6.exit");
    printf("\n Enter the choice");
    scanf("%d",&ch);
    switch(ch)
    {
      case 1:  start=NULL;
	       create();
	       break;
      case 2:  display();
	       break;
      case 3:  printf("Enter item to insert at begining \n");
	       scanf("%d",&item);
	       printf("the linked list before insertion");
	       display();
	       insert_beg(item);
	       printf("\n the linked list after insertion is");
	       display();
	       break;
      case 4:  printf("enter item to insert at end\n");
	       scanf("%d",&item);
	       printf("the linked list before insertion");
	       display();
	       insert_end(item);
	       break;
      case 5:  printf("insert item at specific position\n");
	       scanf("%d",&item);
	       printf("\n Enter valid position");
	       scanf("%d",&pos);
	       if((pos==0)||(pos>length()+1))
	       {
		printf("\n Invalid position");
	       }
	       else
	       {
		 printf("the linked list before insert:");
		 display();
		 insert_pos(item,pos);
		 printf("\n\n the linked list after insertion");
		 display();
		 break;
	       }
      case 6:  exit(0);
      default: printf("wrong choice");
    }
  }
}

----------------------------------
//Linked List insertion program in other way
#include<stdio.h>
#include<ctype.h>

struct node
{
  int info;
  struct node *link;
};
typedef struct node Node;
Node *start=NULL;

void create()
{
  char ch;
  int i=0;

  Node *currptr,*newnode;
  currptr=(Node *)malloc(sizeof(Node));
  start=currptr;
  while(1)
  {
    printf("\n Enter the node %d",i+1);
    scanf("%d",&currptr->info);
    printf("Do you wish to add one more node[y/n]: \n");
    ch=getch();
    if(toupper(ch)=='y')
    {
       newnode=(Node *)malloc(sizeof(Node));
       currptr->link=newnode;
       currptr=newnode;
    }
    else
    {
      currptr->link=NULL;
      break;
    }
  }
}

void display()
{
  Node *currptr=start;
  if(start==NULL)
  {
    printf("The list is empty");
  }
  else
  {
    while(currptr!=NULL)
    {
      printf("%d",currptr->info);
      printf("->");
      currptr=currptr->link;
    }
  }
}

int length()
{
  int len=0;
  Node *currptr;

  if(start==NULL)
  {
    printf("The list is empty");
    return(len);
  }
  currptr=start;
  while(currptr!=NULL)
  {
     len++;
     currptr=currptr->link;
  }
  return(len);
}

void insert_beg()
{
  Node *newnode;
  int item;
  newnode=(Node *)malloc(sizeof(Node));
  newnode->info=item;
  newnode->link=start;
  start=newnode;
}

void insert_end()
{
  int item;
  Node *currptr, *newnode;
  if(start==NULL)
  {
    newnode=(Node *)malloc(sizeof(Node));
    newnode->info=item;
    newnode->link=NULL;
    start=newnode;
  }
  else
  {
    currptr=start;
    while(currptr->link!=NULL)
    {
      currptr=currptr->link;
    }
    newnode=(Node *)malloc(sizeof(Node));
    newnode->info=item;
    currptr->link=newnode;
    newnode->link=NULL;
  }
}

void insert_pos()
{

  int i,item,pos;
  Node *currptr=start,*newnode;
  if(pos==1)
    insert_beg(item);
  else
  {
    for(i=0;i<pos-2;i++)
    {
      currptr=currptr->link;
    }
    newnode=(Node *)malloc(sizeof(Node));
    newnode->info=item;
    newnode->link=currptr->link;
    currptr->link=newnode;
  }
}

void main()
{
  int ch,l,item,pos;
  clrscr();
  while(1)
  {
    printf("\n 1.create");
    printf("\n 2.Display");
    printf("\n 3.Insert in Begining");
    printf("\n 4.insert at end");
    printf("\n 5.insert at specified position");
    printf("\n 6.exit");
    printf("\n Enter the choice");
    scanf("%d",&ch);
    switch(ch)
    {
      case 1:  start=NULL;
	       create();
	       break;
      case 2:  display();
	       break;
      case 3:  printf("Enter item to insert at begining \n");
	       scanf("%d",&item);
	       printf("\n the linked list before insertion");
	       display();
	       insert_beg(item);
	       printf("\n the linked list after insertion is");
	       display();
	       break;
      case 4:  printf("\n enter item to insert at end");
	       scanf("%d",&item);
	       printf("\n the linked list before insertion");
	       display();
	       break;
      case 5:  printf("insert item at specific position");
	       scanf("%d",&item);
	       printf("\n Enter valid position");
	       scanf("%d",&pos);
	       if((pos==0)||(pos>length()+1))
	       {
		printf("\n Invalid position");
	       }
	       else
	       {
		 printf("\n the linked list before insert");
		 display();
		 insert_pos(item,pos);
		 printf("\n the linked list after insertion");
		 display();
		 break;
	       }
      case 6:  exit(0);
      default: printf("wrong choice");
    }
  }
}

-----------------------------------------
//Deletion of Linked List by Megha Mam
-----------------------------------------
------------------------
1. Deletion at beginning
------------------------
#include<stdio.h>

struct node
{
  struct node *link;
  int info;
};
typedef struct node Node;
Node *start=NULL;

void create()
{
  char ch;
  int i=0;

  Node *currptr,*newnode;
  currptr=(Node *)malloc(sizeof(Node));
  start=currptr;
  while(1)
  {
    printf("\n Enter the node %d",i+1);
    scanf("%d",&currptr->info);
    printf("Do you wish to add one more node[y/n]: \n");
    ch=getche();
    if((ch=='y')||(ch=='Y'))
    {
       newnode=(Node *)malloc(sizeof(Node));
       currptr->link=newnode;
       currptr=newnode;
    }
    else
    {
      currptr->link=NULL;
      break;
    }
  }
}

void display()
{
  Node *currptr=start;
  if(start==NULL)
  {
    printf("The list is empty");
  }
  else
  {
    while(currptr!=NULL)
    {
      printf("%d",currptr->info);
      printf("->");
      currptr=currptr->link;
    }
    printf("NULL");
  }
}

void del_beg()
{
  Node *currptr;
  if(start==NULL)
  {
    printf("\n Linked list is empty \n");
    return;
  }
  else
  {
    currptr=start;
    start=start->link;
    free(currptr);
  }
}

void main()
{
  int ch,item,pos;
  clrscr();
  while(1)
  {
    printf("\n 1.create");
    printf("\n 2.Display");
    printf("\n 3.Delete in Begining");
    printf("\n 4.exit");
    printf("\n Enter the choice");
    scanf("%d",&ch);
    switch(ch)
    {
      case 1:  start=NULL;
	          create();
	          break;
      case 2:  display();
	          break;
      case 3:  printf("\n the linked list before deletion: ");
	          display();
	          del_beg();
	          printf("\n the linked list after deletion is: ");
	          display();
	          break;
      case 4:  exit(0);
      default: printf("wrong choice");
    }
  }
}




-----------------------------------------
//Deletion of Linked List by Hari Prasad
-----------------------------------------
#include<stdio.h>

struct node
{
  int info;
  struct node *link;
};
typedef struct node Node;
Node *start=NULL;

void create()
{
  char ch;
  int i=0;

  Node *currptr,*newnode;
  currptr=(Node *)malloc(sizeof(Node));
  start=currptr;
  while(1)
  {
    printf("\n Enter the node %d",i+1);
    scanf("%d",&currptr->info);
    printf("Do you wish to add one more node[y/n]: \n");
    ch=getche();
    if((ch=='y')||(ch=='Y'))
    {
       newnode=(Node *)malloc(sizeof(Node));
       currptr->link=newnode;
       currptr=newnode;
    }
    else
    {
      currptr->link=NULL;
      break;
    }
  }
}

void display()
{
  Node *currptr=start;
  if(start==NULL)
  {
    printf("The list is empty");
  }
  else
  {
    while(currptr!=NULL)
    {
      printf("%d",currptr->info);
      printf("->");
      currptr=currptr->link;
    }
    printf("NULL");
  }
}

int length()
{
  int len=0;
  Node *currptr;

  if(start==NULL)
  {
    printf("The list is empty");
    return(len);
  }
  currptr=start;
  while(currptr!=NULL)
  {
     len++;
     currptr=currptr->link;
  }
  return(len);
}

void del_beg()
{
  Node *currptr;
  if(start==NULL)
  {
    printf("\n Linked list is empty \n");
    return;
  }
  else
  {
    currptr=start;
    start=start->link;
    free(currptr);
  }
}

void del_end()
{
   Node *currptr,*prevptr;
   if(start==NULL)
   {
     printf("\n Linked list is empty \n");
     return;
   }
   else
   if(start->link==NULL)
   {
       start=NULL;
       return;
   }
   else
   {
     currptr=start;
     prevptr=NULL;
     while(currptr->link!=NULL)
     {
       prevptr=currptr;
       currptr=currptr->link;
     }
     prevptr->link=NULL;
     free(currptr);
   }
}

void del_pos(int pos)
{
   int i;
   Node *currptr,*prevptr;
   if(pos==1)
   del_beg();
   else
   {
     currptr=start;
     prevptr=NULL;
     for(i=1;i<pos;i++)
     {
       prevptr=currptr;
       currptr=currptr->link;
     }
     prevptr->link=currptr->link;
     free(currptr);
   }
}

void main()
{
  int ch,item,pos;
  clrscr();
  while(1)
  {
    printf("\n 1.create");
    printf("\n 2.Display");
    printf("\n 3.Delete in Begining");
    printf("\n 4.Delete at end");
    printf("\n 5.Delete at specified position");
    printf("\n 6.exit");
    printf("\n Enter the choice");
    scanf("%d",&ch);
    switch(ch)
    {
      case 1:  start=NULL;
	       create();
	       break;
      case 2:  display();
	       break;
      case 3:  printf("\n the linked list before deletion: ");
	       display();
	       del_beg();
	       printf("\n the linked list after deletion is: ");
	       display();
	       break;
      case 4:  printf("\n the linked list before deletion at end: ");
	       display();
	       del_end();
	       printf("\n the linked list after deletion at end: ");
	       display();
	       break;
      case 5:  printf("\n Enter valid position");
	       scanf("%d",&pos);
	       if((pos==0)||(pos>length()+1))
	       {
		printf("\n Invalid position");
		break;
	       }
	       else
	       {
		 printf("\n the linked list before deletion");
		 display();
		 del_pos(pos);
		 printf("\n the linked list after deletion is:");
		 display();
		 break;
	       }
      case 6:  exit(0);
      default: printf("wrong choice");
    }
  }
}


----------------------------------
//Binary search tree Traversal
----------------------------------

#include<stdio.h>
#include<stdlib.h>

struct node
{
 struct node *left;
 int info;
 struct node *right;
};
typedef struct node Node;
Node *root=NULL;

void create_bt(Node *ptr)
{
  Node *newright, *newleft;
  char ch;
  int item;

  if(ptr!=NULL)
  {
    printf("Enter an item ");
    scanf("%d \n",&item);
    ptr->info=item;
    printf("Do you want to create a left child[y/n]: %d \n",ptr->info);
    ch=getche();
    if(ch=='Y'||ch=='y')
    {
      newleft=(Node *)malloc(sizeof(Node));
      ptr->left = newleft;
      create_bt(newleft);
    }
    else
    {
      ptr->left = NULL;
      create_bt(NULL);
    }
    printf("\n Do you want to create a right child(y/n)");
    ch=getche();
    if(ch=='Y'||ch=='y')
    {
      newright=(Node *)malloc(sizeof(Node));
      ptr->right=newright;
      create_bt(newright);
    }
    else
    {
      ptr->right = NULL;
      create_bt(NULL);
    }
  }
 }

void display(Node *ptr,int level)
{
   int i;
   if(ptr!=NULL)
   {
     display(ptr->right,level+1);
     for(i=0;i<level;i++)
     printf("  ");
     printf("%d",ptr->info);
     display(ptr->left,level+1);
   }
}

void preorder(Node *ptr)
{
  if(ptr!=NULL)
  {
    printf("%d",ptr->info);
    preorder(ptr->left);
    preorder(ptr->right);
  }
}

void inorder(Node *ptr)
{
   if(ptr!=NULL)
   {
     inorder(ptr->left);
     printf("%d",ptr->info);
     inorder(ptr->right);
   }
}

void postorder(Node *ptr)
{
  if(ptr!=NULL)
  {
    postorder(ptr->left);
    postorder(ptr->right);
    printf("%d",ptr->info);
  }
}

void main()
{
  int ch,item;
  Node *root=NULL;
  clrscr();

  while(1)
  {
    printf("\n Binary Tree Traversal \n");
    printf("\n 1.Create \n");
    printf("\n 2.Display \n");
    printf("\n 3.Pre-Order \n");
    printf("\n 4.In-Order \n");
    printf("\n 5.PostOrder \n");
    printf("\n 6.Exit \n");
    printf("Enter your choice: ");
    scanf("%d",&ch);

  switch(ch)
  {
   case 1:root=(Node *)malloc(sizeof(Node));
	  create_bt(root);
	  break;
   case 2:printf("\n Binary Tree \n");
	  display(root,1);
	  break;
   case 3:printf("Pre-Order \n");
	  preorder(root);
	  break;
   case 4:printf("Inorder \n");
	  inorder(root);
	  break;
   case 5:printf("postorder \n");
	  postorder(root);
	  break;
   case 6:exit(0);
   default:printf("wrong choice");
  }
  }
}

--------------------------------------------
//Bubble Sort
--------------------------------------------
//program for bubble sorting for ascending and descending order
#include<stdio.h>
void main()
{
  int a[10];
  int i,t,j,n;
  clrscr();
  
  printf("enter the array size: ");
  scanf("%d",&n);
  
  printf("enter %d elements of array: \n", n);
  for(i=0;i<n;i++)
    scanf("%d",&a[i]);
    
  for(i=0;i<n;i++)
  {
  for(j=0;j<n;j++)
   {
    if(a[j]>a[j+1])
    {
     t=a[j];
     a[j]=a[j+1];
     a[j+1]=t;
    }
   }
  }
  
  printf("list in the sorted order \n");
  for(i=0;i<n;i++)
  printf("\t%d",a[i]);
  getch();
}

--------------------------------------------
//Insertion Sort
--------------------------------------------
#include<stdio.h>
void main()
{
  int a[10];
  int i,t,j,n;
  clrscr();

  printf("enter the array size: ");
  scanf("%d",&n);

  printf("enter %d elements of array: \n", n);
  for(i=0;i<n;i++)
  {
    scanf("%d",&a[i]);
  }

  for(i=0;i<n;i++)
  {
    t=a[i];
    for(j=i;j>0 && t<a[j-1];j--)
    {
      a[j]=a[j-1];
    }
    a[j]=t;
  }
  printf("print the elements in the sorted order \n");
  for(i=0;i<n;i++)
  printf("\t%d",a[i]);
  getch();
}

--------------------------------------------
//Selection Sort
--------------------------------------------
#include<stdio.h>

void main()
{
  int a[10],i,temp,n,k,loc=0,j,min;
  min=a[k];
  loc=k;
  clrscr();

  printf("enter the array size: ");
  scanf("%d",&n);

  printf("enter %d elements of array: \n", n);
  for(i=0;i<n;i++)
  scanf("%d",&a[i]);

  for(k=0;k<n;k++)
  {
    for(j=k+1;j<=n-1;j++)
	{
	  if(min>a[j])
      {
	    min=a[j];
	    loc=j;
      }
    }
    temp=a[k];
    a[k]=a[loc];
    a[loc]=temp;
  }

  printf("the elements in the sorted order \n");
  for(i=0;i<n;i++)
  printf("\n %d",a[i]);
  getch();
}
